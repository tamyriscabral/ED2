#include <stdio.h>
#include <stdlib.h>


typedef struct Elemento* ApontadorElemento;

typedef struct Elemento {
    unsigned int dado;
    ApontadorElemento prox;
} Elemento;

ApontadorElemento base;


int push (int dado) {
    ApontadorElemento q, r;
    Elemento elemento;

    elemento.dado = dado;

    q = (ApontadorElemento) malloc( sizeof (elemento) );

    if (base == NULL){
        if (q == NULL) {
            return (-1);
        }
        else {
            q->dado = elemento.dado;

            if (base == NULL) {
                q->prox = NULL;
            }
            else{
                q->prox = base;
            }
            base = q;
            return (0);
        }
    }
    else{
        if (q == NULL) {
            return (-1);
        }
            else{
            q->dado = elemento.dado;
            q->prox = NULL;
            r = base;
            while (r->prox != NULL) {
                r = r->prox;
            }
            r->prox = q;
            return (0);
        }
    }
}


int pop() {
    ApontadorElemento r, q;
    r = base;
    int retorno;

    while(r->prox != NULL){
        q = r;
        r = r->prox;
    }
    
    if(q != NULL){
        q->prox = NULL;
    }

    retorno = r->dado;
    r = NULL;
    free(r);

    return retorno;
}

int top() {
    ApontadorElemento r;
    r = base;

    while(r->prox != NULL){
        r = r->prox;
    }

    return r->dado;
}

void imprimir() {
    ApontadorElemento r;
    r = base;

    printf("ConteÃºdo da pilha:\n");
    while(r != NULL){
        printf("%d ", r->dado);
        r = r->prox;
    }
    printf("\n");
}

int main() {
    push(10);
    push(20);
    push(30);
    imprimir();
    printf("Elemento no topo: %d\n", top());
    printf("Elemento removido: %d\n", pop());
    imprimir();
    return 0;
}
